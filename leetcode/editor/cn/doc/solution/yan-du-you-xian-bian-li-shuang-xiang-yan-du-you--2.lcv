**说明**：本题解于 2021 年 4 月 2 日重写，代码可以通过系统测评。

---

### 方法：广度优先遍历、深度优先遍历（回溯）

#### 思路分析

这道题的前置问题是 [127. 单词接龙](/problems/word-ladder/) 。

我们首先解释题意。题目中给出的单词和单词之间的关系构成了一张 **无向图**。为什么是无向图呢，这是因为根据转换的规则：**两个单词有且只有一个字符不相等**，如果可以从一个单词 word1 转换成为单词 word2，那么一定可以从单词 word2 转换成为 word1。

以例 1 为例，

* 

```
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
```

可以构建出这些单词之间的关系如下。

![image.png](https://pic.leetcode-cn.com/1618299837-LTGHSA-image.png){:style="width:500px"}

且是无权图，每个顶点之间的权重视为 $1$。题目要我们找 **最短转换序列**，提示我们需要使用 **广度优先遍历**。广度优先遍历就是用于找无权图的最短路径。

与绝大多数使用广度优先遍历，只要求我们返回最短路径是多少的问题（本题的前置问题 [127. 单词接龙](/problems/word-ladder/) ）相比，本题要求返回 **所有** 从 `beginWord` 到 `endWord` 的最短转换序列，提示我们需要使用搜索算法（回溯算法、**深度优先遍历**）完成。

#### 难点和注意事项

需要注意的是，由于要找最短路径，连接 `dot` 与 `lot` 之间的边就不可以被记录下来，同理连接 `dog` 与 `log` 之间的边也不可以被记录。这是因为经过它们的边一定不会是最短路径。因此在广度优先遍历的时候，需要记录的图的关系如下图所示。

![image.png](https://pic.leetcode-cn.com/1618300055-clwIeF-image.png){:style="width:500px"}

**由于位于广度优先遍历同一层的单词如果它们之间有边连接，不可以被记录下来**。因此需要一个哈希表记录遍历到的单词在第几层。理解下面这张图和图中的说明非常重要。

![image.png](https://pic.leetcode-cn.com/1618300684-hGGrTe-image.png){:style="width:500px"}

在广度优先遍历的时候，我们需要记录：从当前的单词 `currWord` 只变化了一个字符以后，且又在单词字典中的单词 `nextWord` 之间的单向关系（虽然实际上无向图，但是广度优先遍历是有方向的，我们解决这个问题可以只看成有向图），记为 `from`，它是一个映射关系：键是单词，值是广度优先遍历的时候从哪些单词可以遍历到「键」所表示的单词，使用哈希表来保存。

**参考代码**：

**说明**：有一些朋友反映代码比较长、注释比较多，因此提供了 2 版「一样的」代码。
+ 选项卡 1 是没有 `import` 语句的版本，并且没有注释，但保留了空行的版本；
+ 选项卡 2 添加了 `import` 语句和注释，代码不变。

* []

```Java
class Solution {

    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> res = new ArrayList<>();
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) {
            return res;
        }
        dict.remove(beginWord);

        Map<String, Integer> steps = new HashMap<>();
        steps.put(beginWord, 0);
        Map<String, Set<String>> from = new HashMap<>();
        boolean found = bfs(beginWord, endWord, dict, steps, from);

        if (found) {
            Deque<String> path = new ArrayDeque<>();
            path.add(endWord);
            dfs(from, path, beginWord, endWord, res);
        }
        return res;
    }


    private boolean bfs(String beginWord, String endWord, Set<String> dict, Map<String, Integer> steps, Map<String, Set<String>> from) {
        int wordLen = beginWord.length();
        int step = 0;
        boolean found = false;

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String currWord = queue.poll();
                char[] charArray = currWord.toCharArray();
                for (int j = 0; j < wordLen; j++) {
                    char origin = charArray[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        charArray[j] = c;
                        String nextWord = String.valueOf(charArray);
                        if (steps.containsKey(nextWord) && steps.get(nextWord) == step) {
                            from.get(nextWord).add(currWord);
                        }

                        if (!dict.contains(nextWord)) {
                            continue;
                        }
                        dict.remove(nextWord);
                        queue.offer(nextWord);
                        from.putIfAbsent(nextWord, new HashSet<>());
                        from.get(nextWord).add(currWord);
                        steps.put(nextWord, step);
                        if (nextWord.equals(endWord)) {
                            found = true;
                        }
                    }
                    charArray[j] = origin;
                }
            }
            if (found) {
                break;
            }
        }
        return found;
    }

    private void dfs(Map<String, Set<String>> from, Deque<String> path, String beginWord, String cur, List<List<String>> res) {
        if (cur.equals(beginWord)) {
            res.add(new ArrayList<>(path));
            return;
        }
        for (String precursor : from.get(cur)) {
            path.addFirst(precursor);
            dfs(from, path, beginWord, precursor, res);
            path.removeFirst();
        }
    }
}
```

* []

```Java
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class Solution {

    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> res = new ArrayList<>();
        // 因为需要快速判断扩展出的单词是否在 wordList 里，因此需要将 wordList 存入哈希表，这里命名为「字典」
        Set<String> dict = new HashSet<>(wordList);
        // 特殊用例判断
        if (!dict.contains(endWord)) {
            return res;
        }
        // 因为从 beginWord 开始扩展，因此 dict 里一定不可以有 beginWord
        dict.remove(beginWord);

        // 第 1 步：广度优先遍历构建图
        // 为了避免记录不需要的边，我们需要记录扩展出的单词是在第几次扩展的时候得到的，key：单词，value：在广度优先遍历的第几层
        // steps 记录了已经访问过的 word 集合，同时记录了在第几层访问到
        Map<String, Integer> steps = new HashMap<>();
        steps.put(beginWord, 0);
        // 记录了单词是从哪些单词扩展而来，key：单词，value：单词列表，这些单词可以变换到 key ，它们是一对多关系，dfs 的时候会用到
        Map<String, Set<String>> from = new HashMap<>();
        boolean found = bfs(beginWord, endWord, dict, steps, from);
        
        // 第 2 步：深度优先遍历找到所有解，从 endWord 恢复到 beginWord ，所以每次尝试操作 path 列表的头部
        if (found) {
            Deque<String> path = new ArrayDeque<>();
            path.add(endWord);
            dfs(from, path, beginWord, endWord, res);
        }
        return res;
    }


    private boolean bfs(String beginWord, String endWord, Set<String> dict, Map<String, Integer> steps, Map<String, Set<String>> from) {
        int wordLen = beginWord.length();
        int step = 0;
        boolean found = false;

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String currWord = queue.poll();
                char[] charArray = currWord.toCharArray();
                for (int j = 0; j < wordLen; j++) {
                    char origin = charArray[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        // 将每一位替换成 26 个小写英文字母
                        charArray[j] = c;
                        String nextWord = String.valueOf(charArray);
                        // 注意：这几行代码的逻辑先后顺序
                        if (steps.containsKey(nextWord) && steps.get(nextWord) == step) {
                            from.get(nextWord).add(currWord);
                        }
                        
                        if (!dict.contains(nextWord)) {
                            continue;
                        }
                        dict.remove(nextWord);

                        // dict 和 steps 承担了已经访问的功能
                        queue.offer(nextWord);

                        // 维护 from、steps、found 的定义
                        from.putIfAbsent(nextWord, new HashSet<>());
                        from.get(nextWord).add(currWord);
                        steps.put(nextWord, step);
                        if (nextWord.equals(endWord)) {
                            // 注意：由于有多条路径到达 endWord 找到以后不能立即退出，只需要设置 found = true 即可
                            found = true;
                        }
                    }
                    charArray[j] = origin;
                }
            }
            if (found) {
                break;
            }
        }
        return found;
    }

    private void dfs(Map<String, Set<String>> from, Deque<String> path, String beginWord, String cur, List<List<String>> res) {
        if (cur.equals(beginWord)) {
            res.add(new ArrayList<>(path));
            return;
        }
        for (String precursor : from.get(cur)) {
            path.addFirst(precursor);
            dfs(from, path, beginWord, precursor, res);
            path.removeFirst();
        }
    }
}
```

---

### 还未完成的工作

+ 复杂度分析：这个对我来说太复杂了，有可能我分析不出来；
+ **双向** 广度优先遍历（我还没有时间做）。

原来我的题解中的代码超时，是因为

* java

```java
visited.addAll(nextLevelVisited);
nextLevelVisited.clear();
```

这样的操作比较耗时，现在写的代码，使用 `steps` 将已经遍历过的单词分类处理，并且还有原来 `visited` 的功能，就正好不超时了。真的是测试用例逼得我们要精益求精啊。

